{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/base.schema.json",
  "title": "F5 Declarative Onboarding base declaration",
  "description": "Top level schema for onboarding a BIG-IP.",
  "type": "object",
  "required": [
    "schemaVersion",
    "class"
  ],
  "propertyNames": {
    "oneOf": [
      {
        "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$"
      },
      {
        "const": "$schema"
      }
    ]
  },
  "properties": {
    "schemaVersion": {
      "description": "Version of Declarative Onboarding schema this declaration uses.",
      "type": "string",
      "enum": [
        "1.12.0",
        "1.11.1",
        "1.11.0",
        "1.10.0",
        "1.9.0",
        "1.8.0",
        "1.7.0",
        "1.6.1",
        "1.6.0",
        "1.5.1",
        "1.5.0",
        "1.4.1",
        "1.4.0",
        "1.3.0",
        "1.2.0",
        "1.1.0",
        "1.0.0"
      ]
    },
    "class": {
      "description": "Indicates this JSON document is a Device declaration",
      "type": "string",
      "const": "Device"
    },
    "$schema": {
      "description": "URL of schema against which to validate. Used by validation in your local environment only (via Visual Studio Code, for example)",
      "type": "string",
      "format": "uri"
    },
    "async": {
      "description": "Tells the API to return a 202 HTTP status before processing is complete. User must then poll for status.",
      "type": "boolean",
      "default": false
    },
    "webhook": {
      "description": "URL to post results to",
      "type": "string",
      "format": "uri"
    },
    "label": {
      "description": "Optional friendly name for this declaration",
      "type": "string"
    },
    "Credentials": {
      "description": "Credentials which can be referenced from other parts of the declaration or the remote wrapper.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "username": {
            "description": "Username of principal authorized to modify configuration of device (may not include the character ':').  NOTE:  this is generally not required to configure 'localhost' because client authentication and authorization precede invocation of DO.  It is also not required for any host if you populate tokens",
            "type": "string",
            "pattern": "^[^:]{0,254}$"
          },
          "password": {
            "description": "Password for username account.  This is generally not required to configure 'localhost' and is not required when you populate tokens",
            "type": "string",
            "pattern": "^.{0,254}$"
          },
          "tokens": {
            "description": "One or more HTTP headers (each a property, like 'X-F5-Auth-Token': 'MF6APSRUYKTMSDBEOOEWLCNSO2') you want to send with queries to the device management service as authentication/authorization tokens",
            "type": "object",
            "patternProperties": {
              "^[^\\x00-\\x20:\\x7f-\\xff]{1,254}$": {
                "type": "string",
                "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]*$",
                "maxLength": 8192
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false,
        "if": {
          "required": [
            "tokens"
          ]
        },
        "then": {
          "dependencies": {
            "username": {
              "not": {
                
              }
            },
            "password": {
              "not": {
                
              }
            }
          }
        },
        "else": {
          "dependencies": {
            "tokens": {
              "not": {
                
              }
            }
          }
        }
      }
    },
    "Common": {
      "description": "Special tenant Common holds objects other tenants can share",
      "type": "object",
      "required": [
        "class"
      ],
      "propertyNames": {
        "pattern": "^[A-Za-z][0-9A-Za-z_-]{0,47}$"
      },
      "properties": {
        "class": {
          "type": "string",
          "const": "Tenant"
        }
      },
      "additionalProperties": {
        "allOf": [
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/system.schema.json",
            "title": "F5 Declarative Onboarding system declaration",
            "description": "System properties for onboarding a BIG-IP.",
            "properties": {
              "hostname": {
                "description": "Hostname to set for the device. Note: If you set the hostname as part of the System class, you CANNOT set a hostname in the Common class (they are mutually exclusive).",
                "type": "string",
                "format": "hostname"
              }
            },
            "allOf": [
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DeviceCertificate"
                    }
                  }
                },
                "then": {
                  "description": "PKI certificate with optional chain",
                  "required": [
                    "class",
                    "certificate"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains device certificate information",
                      "type": "string",
                      "const": "DeviceCertificate"
                    },
                    "certificate": {
                      "description": "X.509 public-key certificate",
                      "if": true,
                      "then": {
                        "description": "String value in base64",
                        "type": "object",
                        "properties": {
                          "base64": {
                            "description": "Base64-encoded value (in JSON string)",
                            "type": "string",
                            "format": "f5base64"
                          }
                        }
                      },
                      "f5fetch": "pki-cert"
                    },
                    "privateKey": {
                      "description": "Private key matching certificate's public key (optional)",
                      "if": true,
                      "then": {
                        "description": "String value in base64",
                        "type": "object",
                        "properties": {
                          "base64": {
                            "description": "Base64-encoded value (in JSON string)",
                            "type": "string",
                            "format": "f5base64"
                          }
                        }
                      },
                      "f5fetch": "pki-key"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "License"
                    }
                  }
                },
                "then": {
                  "oneOf": [
                    {
                      "description": "Registration key information.",
                      "required": [
                        "class",
                        "licenseType",
                        "regKey"
                      ],
                      "properties": {
                        "class": {
                          "description": "Indicates that this property contains licensing information.",
                          "type": "string",
                          "const": "License"
                        },
                        "licenseType": {
                          "description": "The type of license",
                          "type": "string",
                          "const": "regKey"
                        },
                        "regKey": {
                          "description": "Registration key.",
                          "type": "string",
                          "pattern": "^([A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{7})|([A-Z][0-9]{4}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{7})$"
                        },
                        "addOnKeys": {
                          "description": "Add on keys.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[A-Z]{7}-[A-Z]{7}$",
                            "uniqueItems": true
                          }
                        },
                        "overwrite": {
                          "description": "Whether or not to overwrite the license if the device is already licensed.",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "required": [
                        "class",
                        "licenseType"
                      ],
                      "if": {
                        "required": [
                          "reachable"
                        ],
                        "properties": {
                          "reachable": {
                            "const": false
                          }
                        }
                      },
                      "then": {
                        "if": {
                          "required": [
                            "licensePool"
                          ]
                        },
                        "then": {
                          "required": [
                            "hypervisor"
                          ]
                        }
                      },
                      "else": {
                        "if": {
                          "required": [
                            "licensePool"
                          ]
                        },
                        "then": {
                          "required": [
                            "bigIpUsername",
                            "bigIpPassword"
                          ]
                        }
                      },
                      "properties": {
                        "class": {
                          "description": "Indicates that this property contains licensing information.",
                          "type": "string",
                          "const": "License"
                        },
                        "licenseType": {
                          "description": "The type of license",
                          "type": "string",
                          "const": "licensePool"
                        },
                        "licensePool": {
                          "description": "Name of the BIG-IQ license pool from which to get a new license.",
                          "type": "string"
                        },
                        "skuKeyword1": {
                          "description": "skuKeyword1 parameter for subscription licensing.",
                          "type": "string"
                        },
                        "skuKeyword2": {
                          "description": "skuKeyword2 parameter for subscription licensing.",
                          "type": "string"
                        },
                        "unitOfMeasure": {
                          "description": "unitOfMeasure parameter for subscription licensing.",
                          "type": "string",
                          "enum": [
                            "yearly",
                            "monthly",
                            "daily",
                            "hourly"
                          ]
                        },
                        "hypervisor": {
                          "description": "Hypervisor which is running the BIG-IP. Required by BIG-IQ if 'reachable' is false.",
                          "type": "string",
                          "enum": [
                            "aws",
                            "azure",
                            "gce",
                            "vmware",
                            "hyperv",
                            "kvm",
                            "xen"
                          ]
                        },
                        "bigIpUsername": {
                          "description": "An admin user on the BIG-IP. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                          "type": "string",
                          "anyOf": [
                            {
                              "format": "json-pointer"
                            },
                            {
                              "pattern": "^.{0,254}$"
                            }
                          ]
                        },
                        "bigIpPassword": {
                          "description": "Password for the user in bigIpUsername. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                          "type": "string",
                          "anyOf": [
                            {
                              "format": "json-pointer"
                            },
                            {
                              "pattern": "^.{0,254}$"
                            }
                          ]
                        },
                        "overwrite": {
                          "description": "Whether or not to overwrite the license if the device is already licensed.",
                          "type": "boolean",
                          "default": false
                        },
                        "revokeFrom": {
                          "description": "Current license should be revoked from the pool specified. Either just the name of the pool (if old license is on the same BIG-IQ as in the main License section) or full licensePoolInfo (if old license is on a different BIG-IQ)",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "required": [
                                "licensePool"
                              ],
                              "properties": {
                                "licensePool": {
                                  "description": "Name of the BIG-IQ license pool.",
                                  "type": "string"
                                }
                              },
                              "allOf": [
                                {
                                  "description": "BIG-IQ host/credentials information",
                                  "type": "object",
                                  "allOf": [
                                    {
                                      "if": {
                                        "required": [
                                          "bigIqPassword"
                                        ]
                                      },
                                      "then": {
                                        "dependencies": {
                                          "bigIqPasswordUri": {
                                            "not": {
                                              
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "if": {
                                        "required": [
                                          "bigIqHost"
                                        ]
                                      },
                                      "then": {
                                        "if": {
                                          "not": {
                                            "properties": {
                                              "bigIqHost": {
                                                "const": "localhost"
                                              }
                                            }
                                          }
                                        },
                                        "then": {
                                          "required": [
                                            "bigIqUsername"
                                          ],
                                          "oneOf": [
                                            {
                                              "required": [
                                                "bigIqPassword"
                                              ]
                                            },
                                            {
                                              "required": [
                                                "bigIqPasswordUri"
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ],
                                  "properties": {
                                    "bigIqHost": {
                                      "description": "The BIG-IQ hostname or IP address.",
                                      "type": "string",
                                      "anyOf": [
                                        {
                                          "format": "ipv4"
                                        },
                                        {
                                          "format": "ipv6"
                                        },
                                        {
                                          "format": "hostname"
                                        }
                                      ]
                                    },
                                    "bigIqUsername": {
                                      "description": "An admin user on the BIG-IQ.",
                                      "type": "string",
                                      "anyOf": [
                                        {
                                          "format": "json-pointer"
                                        },
                                        {
                                          "pattern": "^[^:]{0,254}$"
                                        }
                                      ]
                                    },
                                    "bigIqPassword": {
                                      "description": "Password for the user in bigIqUsername.",
                                      "type": "string",
                                      "anyOf": [
                                        {
                                          "format": "json-pointer"
                                        },
                                        {
                                          "pattern": "^.{0,254}$"
                                        }
                                      ]
                                    },
                                    "bigIqPasswordUri": {
                                      "description": "URI which will return the password for the user in bigIqUsername.",
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "reachable": {
                                      "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                                      "type": "boolean",
                                      "default": true
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "allOf": [
                        {
                          "description": "BIG-IQ host/credentials information",
                          "type": "object",
                          "allOf": [
                            {
                              "if": {
                                "required": [
                                  "bigIqPassword"
                                ]
                              },
                              "then": {
                                "dependencies": {
                                  "bigIqPasswordUri": {
                                    "not": {
                                      
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "if": {
                                "required": [
                                  "bigIqHost"
                                ]
                              },
                              "then": {
                                "if": {
                                  "not": {
                                    "properties": {
                                      "bigIqHost": {
                                        "const": "localhost"
                                      }
                                    }
                                  }
                                },
                                "then": {
                                  "required": [
                                    "bigIqUsername"
                                  ],
                                  "oneOf": [
                                    {
                                      "required": [
                                        "bigIqPassword"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "bigIqPasswordUri"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "properties": {
                            "bigIqHost": {
                              "description": "The BIG-IQ hostname or IP address.",
                              "type": "string",
                              "anyOf": [
                                {
                                  "format": "ipv4"
                                },
                                {
                                  "format": "ipv6"
                                },
                                {
                                  "format": "hostname"
                                }
                              ]
                            },
                            "bigIqUsername": {
                              "description": "An admin user on the BIG-IQ.",
                              "type": "string",
                              "anyOf": [
                                {
                                  "format": "json-pointer"
                                },
                                {
                                  "pattern": "^[^:]{0,254}$"
                                }
                              ]
                            },
                            "bigIqPassword": {
                              "description": "Password for the user in bigIqUsername.",
                              "type": "string",
                              "anyOf": [
                                {
                                  "format": "json-pointer"
                                },
                                {
                                  "pattern": "^.{0,254}$"
                                }
                              ]
                            },
                            "bigIqPasswordUri": {
                              "description": "URI which will return the password for the user in bigIqUsername.",
                              "type": "string",
                              "format": "uri"
                            },
                            "reachable": {
                              "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                              "type": "boolean",
                              "default": true
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "if": {
                    "required": [
                      "licenseType"
                    ],
                    "properties": {
                      "licenseType": {
                        "const": "licensePool"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "unitOfMeasure": {
                        "default": "monthly"
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DbVariables"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains global db variable configuration.",
                      "type": "string",
                      "const": "DbVariables"
                    }
                  },
                  "propertyNames": {
                    "description": "The name of the db variable."
                  },
                  "additionalProperties": {
                    "description": "The value to set for the db variable."
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "Provision"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains module provisioning configuration.",
                      "type": "string",
                      "const": "Provision"
                    }
                  },
                  "propertyNames": {
                    "description": "The module to provision. Note: 'cgnat' is only supported on TMOS v15+",
                    "enum": [
                      "class",
                      "afm",
                      "am",
                      "apm",
                      "asm",
                      "avr",
                      "cgnat",
                      "dos",
                      "fps",
                      "gtm",
                      "ilx",
                      "lc",
                      "ltm",
                      "pem",
                      "swg",
                      "urldb",
                      "sslo"
                    ]
                  },
                  "additionalProperties": {
                    "description": "The level at which to provision the module.",
                    "type": "string",
                    "enum": [
                      "dedicated",
                      "nominal",
                      "minimum",
                      "none"
                    ]
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DNS"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains DNS configuration.",
                      "type": "string",
                      "const": "DNS"
                    },
                    "nameServers": {
                      "description": "IP addresses of name servers to use for DNS.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "ipv4"
                          },
                          {
                            "format": "ipv6"
                          }
                        ]
                      }
                    },
                    "search": {
                      "description": "Search domain to use for DNS.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "hostname"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "NTP"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains NTP configuration.",
                      "type": "string",
                      "const": "NTP"
                    },
                    "servers": {
                      "description": "IP addresses of servers to use for NTP.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "ipv4"
                          },
                          {
                            "format": "ipv6"
                          },
                          {
                            "format": "hostname"
                          }
                        ]
                      }
                    },
                    "timezone": {
                      "description": "The timezone to set.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "HTTPD"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Configures the HTTP daemon for the system.  Important: F5 Networks recommends that users of the Configuration utility exit the utility before changes are made to the system using the httpd component.  This is because making changes to the system using this component causes a restart of the httpd daemon.  Additionally, restarting the httpd daemon creates the necessity for a restart of the Configuration utility.",
                      "type": "string",
                      "const": "HTTPD"
                    },
                    "allow": {
                      "description": "Configures IP addresses for the HTTP clients from which the httpd daemon accepts requests.",
                      "oneOf": [
                        {
                          "type": "string",
                          "const": "none"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "anyOf": [
                              {
                                "format": "ipWithCidr"
                              },
                              {
                                "const": "all"
                              }
                            ]
                          }
                        }
                      ],
                      "default": [
                        "all"
                      ]
                    },
                    "authPamIdleTimeout": {
                      "description": "Specifies the number of seconds of inactivity that can elapse before the GUI session is automatically logged out.",
                      "type": "integer",
                      "minimum": 120,
                      "maximum": 2147483647,
                      "default": 1200
                    },
                    "maxClients": {
                      "description": "Maximum number of clients allowed to be simultaneously connected.",
                      "type": "integer",
                      "minimum": 10,
                      "maximum": 256,
                      "default": 10
                    },
                    "sslCiphersuite": {
                      "description": "Specifies the ciphers that the system uses.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ECDHE-RSA-AES256-GCM-SHA384",
                          "ECDHE-ECDSA-AES256-GCM-SHA384",
                          "ECDHE-RSA-AES256-SHA384",
                          "ECDHE-ECDSA-AES256-SHA384",
                          "ECDHE-RSA-AES256-SHA",
                          "ECDHE-ECDSA-AES256-SHA",
                          "DH-DSS-AES256-GCM-SHA384",
                          "DHE-DSS-AES256-GCM-SHA384",
                          "DH-RSA-AES256-GCM-SHA384",
                          "DHE-RSA-AES256-GCM-SHA384",
                          "DHE-RSA-AES256-SHA256",
                          "DHE-DSS-AES256-SHA256",
                          "DH-RSA-AES256-SHA256",
                          "DH-DSS-AES256-SHA256",
                          "DHE-RSA-AES256-SHA",
                          "DHE-DSS-AES256-SHA",
                          "DH-RSA-AES256-SHA",
                          "DH-DSS-AES256-SHA",
                          "DHE-RSA-CAMELLIA256-SHA",
                          "DHE-DSS-CAMELLIA256-SHA",
                          "DH-RSA-CAMELLIA256-SHA",
                          "DH-DSS-CAMELLIA256-SHA",
                          "ECDH-RSA-AES256-GCM-SHA384",
                          "ECDH-ECDSA-AES256-GCM-SHA384",
                          "ECDH-RSA-AES256-SHA384",
                          "ECDH-ECDSA-AES256-SHA384",
                          "ECDH-RSA-AES256-SHA",
                          "ECDH-ECDSA-AES256-SHA",
                          "AES256-GCM-SHA384",
                          "AES256-SHA256",
                          "AES256-SHA",
                          "CAMELLIA256-SHA",
                          "PSK-AES256-CBC-SHA",
                          "ECDHE-RSA-AES128-GCM-SHA256",
                          "ECDHE-ECDSA-AES128-GCM-SHA256",
                          "ECDHE-RSA-AES128-SHA256",
                          "ECDHE-ECDSA-AES128-SHA256",
                          "ECDHE-RSA-AES128-SHA",
                          "ECDHE-ECDSA-AES128-SHA",
                          "DH-DSS-AES128-GCM-SHA256",
                          "DHE-DSS-AES128-GCM-SHA256",
                          "DH-RSA-AES128-GCM-SHA256",
                          "DHE-RSA-AES128-GCM-SHA256",
                          "DHE-RSA-AES128-SHA256",
                          "DHE-DSS-AES128-SHA256",
                          "DH-RSA-AES128-SHA256",
                          "DH-DSS-AES128-SHA256",
                          "DHE-RSA-AES128-SHA",
                          "DHE-DSS-AES128-SHA",
                          "DH-RSA-AES128-SHA",
                          "DH-DSS-AES128-SHA",
                          "DHE-RSA-SEED-SHA",
                          "DHE-DSS-SEED-SHA",
                          "DH-RSA-SEED-SHA",
                          "DH-DSS-SEED-SHA",
                          "DHE-RSA-CAMELLIA128-SHA",
                          "DHE-DSS-CAMELLIA128-SHA",
                          "DH-RSA-CAMELLIA128-SHA",
                          "DH-DSS-CAMELLIA128-SHA",
                          "ECDH-RSA-AES128-GCM-SHA256",
                          "ECDH-ECDSA-AES128-GCM-SHA256",
                          "ECDH-RSA-AES128-SHA256",
                          "ECDH-ECDSA-AES128-SHA256",
                          "ECDH-RSA-AES128-SHA",
                          "ECDH-ECDSA-AES128-SHA",
                          "AES128-GCM-SHA256",
                          "AES128-SHA256",
                          "AES128-SHA",
                          "SEED-SHA",
                          "CAMELLIA128-SHA",
                          "PSK-AES128-CBC-SHA",
                          "ECDHE-RSA-RC4-SHA",
                          "ECDHE-ECDSA-RC4-SHA",
                          "ECDH-RSA-RC4-SHA",
                          "ECDH-ECDSA-RC4-SHA",
                          "RC4-SHA",
                          "RC4-MD5",
                          "PSK-RC4-SHA",
                          "ECDHE-RSA-DES-CBC3-SHA",
                          "ECDHE-ECDSA-DES-CBC3-SHA",
                          "EDH-RSA-DES-CBC3-SHA",
                          "EDH-DSS-DES-CBC3-SHA",
                          "DH-RSA-DES-CBC3-SHA",
                          "DH-DSS-DES-CBC3-SHA",
                          "ECDH-RSA-DES-CBC3-SHA",
                          "ECDH-ECDSA-DES-CBC3-SHA",
                          "DES-CBC3-SHA",
                          "PSK-3DES-EDE-CBC-SHA",
                          "EDH-RSA-DES-CBC-SHA",
                          "EDH-DSS-DES-CBC-SHA",
                          "DES-CBC-SHA",
                          "EXP-EDH-RSA-DES-CBC-SHA",
                          "EXP-EDH-DSS-DES-CBC-SHA",
                          "EXP-DES-CBC-SHA",
                          "EXP-RC2-CBC-MD5",
                          "EXP-RC4-MD5"
                        ]
                      },
                      "default": [
                        "ECDHE-RSA-AES128-GCM-SHA256",
                        "ECDHE-RSA-AES256-GCM-SHA384",
                        "ECDHE-RSA-AES128-SHA",
                        "ECDHE-RSA-AES256-SHA",
                        "ECDHE-RSA-AES128-SHA256",
                        "ECDHE-RSA-AES256-SHA384",
                        "ECDHE-ECDSA-AES128-GCM-SHA256",
                        "ECDHE-ECDSA-AES256-GCM-SHA384",
                        "ECDHE-ECDSA-AES128-SHA",
                        "ECDHE-ECDSA-AES256-SHA",
                        "ECDHE-ECDSA-AES128-SHA256",
                        "ECDHE-ECDSA-AES256-SHA384",
                        "AES128-GCM-SHA256",
                        "AES256-GCM-SHA384",
                        "AES128-SHA",
                        "AES256-SHA",
                        "AES128-SHA256",
                        "AES256-SHA256"
                      ]
                    },
                    "sslProtocol": {
                      "description": "The list of SSL protocols to accept on the management console.  A space-separated list of tokens in the format accepted by the Apache mod_ssl SSLProtocol directive.",
                      "type": "string",
                      "default": "all -SSLv2 -SSLv3 -TLSv1"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SnmpAgent"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains basic SNMP agent configuration.",
                      "type": "string",
                      "const": "SnmpAgent"
                    },
                    "contact": {
                      "description": "The name of the person who administers the SNMP service for this system.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The description of this system's physical location.",
                      "type": "string"
                    },
                    "allowList": {
                      "description": "Allowed client IP addresses.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "f5ip"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SnmpCommunity"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains SNMP v1 or v2c community configuration.",
                      "type": "string",
                      "const": "SnmpCommunity"
                    },
                    "ipv6": {
                      "description": "Specifies whether the record applies to IPv6 addresses.",
                      "type": "boolean",
                      "default": false
                    },
                    "source": {
                      "description": "Specifies the source address for access to the MIB.",
                      "type": "string"
                    },
                    "oid": {
                      "description": "Specifies the current object identifier (OID) for the record.",
                      "type": "string"
                    },
                    "access": {
                      "description": "Whether the user's access level to the MIB is readOnly.",
                      "type": "string",
                      "enum": [
                        "ro",
                        "rw"
                      ],
                      "default": "ro"
                    },
                    "name": {
                      "description": "Overrides using the object name as the community name. Use this if you want special characters in the community name.",
                      "type": "string"
                    }
                  },
                  "if": {
                    "required": [
                      "oid"
                    ]
                  },
                  "then": {
                    "required": [
                      "source"
                    ]
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SnmpUser"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains SNMP v3 user configuration.",
                      "type": "string",
                      "const": "SnmpUser"
                    },
                    "authentication": {
                      "description": "Specifies the user's authentication method and password.",
                      "type": "object",
                      "required": [
                        "protocol",
                        "password"
                      ],
                      "properties": {
                        "protocol": {
                          "description": "Authentication protocol.",
                          "type": "string",
                          "enum": [
                            "sha",
                            "md5"
                          ],
                          "default": "sha"
                        },
                        "password": {
                          "description": "Specifies the password for the user.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "privacy": {
                      "description": "Specifies the privacy protcol to use to deliver authentication information for this user.",
                      "type": "object",
                      "required": [
                        "protocol",
                        "password"
                      ],
                      "properties": {
                        "protocol": {
                          "description": "Specifies the encryption protocol.",
                          "type": "string",
                          "enum": [
                            "aes",
                            "des"
                          ],
                          "default": "aes"
                        },
                        "password": {
                          "description": "Specifies the password for the user.",
                          "type": "string"
                        }
                      }
                    },
                    "oid": {
                      "description": "Specifies the current object identifier (OID) for the record.",
                      "type": "string",
                      "default": ".1"
                    },
                    "access": {
                      "description": "Whether the user's access level to the MIB is readOnly.",
                      "type": "string",
                      "enum": [
                        "ro",
                        "rw"
                      ],
                      "default": "ro"
                    },
                    "name": {
                      "description": "Overrides using the object name as the username. Use this if you want special characters in the username.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "required": [
                      "privacy"
                    ]
                  },
                  "then": {
                    "required": [
                      "authentication"
                    ]
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SnmpTrapEvents"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains SNMP trap configuration.",
                      "type": "string",
                      "const": "SnmpTrapEvents"
                    },
                    "agentStartStop": {
                      "description": "Indicates whether to send a trap when the SNMP agent starts/stops.",
                      "type": "boolean",
                      "default": true
                    },
                    "authentication": {
                      "description": "Indicates whether to send authentication warning traps.",
                      "type": "boolean",
                      "default": false
                    },
                    "device": {
                      "description": "Indicates whether to send device warning traps.",
                      "type": "boolean",
                      "default": true
                    }
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SnmpTrapDestination"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "version",
                    "destination",
                    "port",
                    "network"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains SNMP trap configuration.",
                      "type": "string",
                      "const": "SnmpTrapDestination"
                    },
                    "version": {
                      "description": "Specifies to which Simple Network Management Protocol (SNMP) version the trap destination applies.",
                      "type": "string",
                      "enum": [
                        "1",
                        "2c",
                        "3"
                      ]
                    },
                    "destination": {
                      "description": "Specifies the address for the trap destination.",
                      "type": "string",
                      "oneOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        }
                      ]
                    },
                    "port": {
                      "description": "Specifies the port for the trap destination.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "network": {
                      "description": "Specifies the trap network. The system sends the SNMP trap out the specified network. 'management' specifies that the system sends the trap out of the management IP address. 'other' specifies that the system sends the trap out of the interface based on the routing tables.",
                      "type": "string",
                      "enum": [
                        "management",
                        "other"
                      ]
                    }
                  },
                  "if": {
                    "required": [
                      "version"
                    ],
                    "properties": {
                      "version": {
                        "const": "3"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "securityName",
                      "authentication"
                    ],
                    "properties": {
                      "securityName": {
                        "description": "Specifies the user name the system uses to handle SNMP v3 traps.",
                        "type": "string"
                      },
                      "authentication": {
                        "description": "Specifies the user's authentication method and password.",
                        "type": "object",
                        "required": [
                          "protocol",
                          "password"
                        ],
                        "properties": {
                          "protocol": {
                            "description": "Authentication protocol.",
                            "type": "string",
                            "enum": [
                              "sha",
                              "md5"
                            ]
                          },
                          "password": {
                            "description": "Specifies the password for the user.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "privacy": {
                        "description": "Specifies the privacy protcol to use to deliver authentication information for this user.",
                        "type": "object",
                        "properties": {
                          "protocol": {
                            "description": "Specifies the encryption protocol.",
                            "type": "string",
                            "enum": [
                              "aes",
                              "des"
                            ]
                          },
                          "password": {
                            "description": "Specifies the password for the user.",
                            "type": "string"
                          }
                        }
                      },
                      "engineId": {
                        "description": "Specifies the unique identifier (snmpEngineID) of the remote SNMP protocol engine.",
                        "type": "string"
                      }
                    }
                  },
                  "else": {
                    "required": [
                      "community"
                    ],
                    "properties": {
                      "community": {
                        "description": "Specifies the community name for the trap destination.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "User"
                    }
                  }
                },
                "then": {
                  "if": {
                    "properties": {
                      "userType": {
                        "const": "root"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "class",
                      "userType",
                      "newPassword",
                      "oldPassword"
                    ],
                    "properties": {
                      "class": {
                        "description": "Indicates that this property contains user configuration.",
                        "type": "string",
                        "const": "User"
                      },
                      "userType": {
                        "description": "The type of user.",
                        "type": "string",
                        "const": "root"
                      },
                      "newPassword": {
                        "description": "Password to set for the root user.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "json-pointer"
                          },
                          {
                            "pattern": "^.{0,254}$"
                          }
                        ]
                      },
                      "oldPassword": {
                        "description": "Old password for the root user.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "json-pointer"
                          },
                          {
                            "pattern": "^.{0,254}$"
                          }
                        ]
                      },
                      "keys": {
                        "description": "An array of public keys for the user. If the user is root, this will preserve only the master key and then overwrite the rest in the file: /root/.ssh/authorized_keys.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": [
                          
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "else": {
                    "required": [
                      "class",
                      "userType"
                    ],
                    "properties": {
                      "class": {
                        "description": "Indicates that this property contains user configuration.",
                        "type": "string",
                        "const": "User"
                      },
                      "userType": {
                        "description": "The type of user.",
                        "type": "string",
                        "const": "regular"
                      },
                      "password": {
                        "description": "Password for the user.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "json-pointer"
                          },
                          {
                            "pattern": "^.{0,254}$"
                          }
                        ]
                      },
                      "partitionAccess": {
                        "description": "Access control configuration.",
                        "type": "object",
                        "properties": {
                          "Common": {
                            "description": "The partition - either 'Common' or 'all-partitions'.",
                            "type": "object",
                            "required": [
                              "role"
                            ],
                            "properties": {
                              "role": {
                                "description": "Role for the user.",
                                "type": "string",
                                "enum": [
                                  "admin",
                                  "auditor",
                                  "guest",
                                  "manager",
                                  "operator",
                                  "user-manager",
                                  "application-editor",
                                  "certificate-manager",
                                  "irule-manager",
                                  "no-access",
                                  "resource-admin"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "all-partitions": {
                            "description": "The partition - either 'Common' or 'all-partitions'.",
                            "type": "object",
                            "required": [
                              "role"
                            ],
                            "properties": {
                              "role": {
                                "description": "Role for the user.",
                                "type": "string",
                                "enum": [
                                  "admin",
                                  "auditor",
                                  "guest",
                                  "manager",
                                  "operator",
                                  "user-manager",
                                  "application-editor",
                                  "certificate-manager",
                                  "irule-manager",
                                  "no-access",
                                  "resource-admin"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "shell": {
                        "description": "Shell for the user.",
                        "type": "string",
                        "enum": [
                          "bash",
                          "tmsh",
                          "none"
                        ],
                        "default": "tmsh"
                      },
                      "keys": {
                        "description": "An array of public keys for the user. These will overwrite the /home/username/.ssh/authorized_keys if not root.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": [
                          
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "ManagementRoute"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates this property contains management route configuration",
                      "type": "string",
                      "const": "ManagementRoute"
                    },
                    "gw": {
                      "description": "Gateway for the management route.",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        }
                      ]
                    },
                    "network": {
                      "description": "IP address/netmask for the management route",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "f5ip"
                        },
                        {
                          "enum": [
                            "default",
                            "default-inet6"
                          ]
                        }
                      ],
                      "default": "default"
                    },
                    "mtu": {
                      "description": "MTU for the management route.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "type": {
                      "description": "Type of the management route",
                      "type": "string",
                      "enum": [
                        "interface",
                        "blackhole"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "network": {
                        "not": {
                          "enum": [
                            "default",
                            "default-inet6"
                          ]
                        }
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "gw"
                    ]
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SyslogRemoteServer"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "host"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains Syslog Remote Server Information",
                      "type": "string",
                      "const": "SyslogRemoteServer"
                    },
                    "host": {
                      "description": "Specifies the IP address of a remote server to which syslog sends messages.",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        },
                        {
                          "format": "hostname"
                        }
                      ]
                    },
                    "localIp": {
                      "description": "Specifies the IP address of the interface syslog binds with in order to log messages to a remote host.",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        }
                      ]
                    },
                    "remotePort": {
                      "description": "Specifies the port to which the syslog sends messages.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535,
                      "default": 514
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "System"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates this property contains global system settings",
                      "type": "string",
                      "const": "System"
                    },
                    "hostname": {
                      "description": "Hostname to set for the device. Note: If you set the hostname as part of the Common class, you CANNOT set a hostname in the System class (they are mutually exclusive).",
                      "type": "string",
                      "format": "hostname"
                    },
                    "consoleInactivityTimeout": {
                      "description": "Configure automatic logout for idle serial console sessions (command line sessions) in seconds. The default value 0 means that no timeout is set.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647,
                      "default": 0
                    },
                    "cliInactivityTimeout": {
                      "description": "Configure automatic logout for idle users in TMSH interactive mode. A setting other than 0 automatically logs a user out after a specified number of seconds, which must be entered in multiples of 60.  The default value 0 means that no timeout is set.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 128849018820,
                      "multipleOf": 60,
                      "default": 0
                    },
                    "autoPhonehome": {
                      "description": "Enables the BIG-IP system to send non-confidential, high-level device information to F5 in order to help determine product usage to optimize product development.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "TrafficControl"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates this property contains traffic control configuration",
                      "type": "string",
                      "const": "TrafficControl"
                    },
                    "acceptIpOptions": {
                      "description": "Specifies whether the system accepts IPv4 packets with IP Options.",
                      "type": "boolean",
                      "default": false
                    },
                    "acceptIpSourceRoute": {
                      "description": "Specifies whether the system accepts IPv4 packets with IP source route options that are destined for TMM. To enable this option, you must also enable the acceptIpOptions option.",
                      "type": "boolean",
                      "default": false
                    },
                    "allowIpSourceRoute": {
                      "description": "Specifies whether the system allows IPv4 packets with IP source route options enabled to be routed through TMM. To enable this option, you must also enable the acceptIpOptions option.",
                      "type": "boolean",
                      "default": false
                    },
                    "continueMatching": {
                      "description": "Specifies whether the system matches against a less-specific virtual server when the more-specific one is disabled or rejects / drops the packets depending on the value of rejectUnmatched.",
                      "type": "boolean",
                      "default": false
                    },
                    "maxIcmpRate": {
                      "description": "Specifies the maximum rate per second at which the system issues ICMP errors.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2147483647,
                      "default": 100
                    },
                    "maxPortFindLinear": {
                      "description": "Specifies the maximum of ports to linearly search for outbound connections",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 61439,
                      "default": 16
                    },
                    "maxPortFindRandom": {
                      "description": "Specifies the maximum of ports to randomly search for outbound connections",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 1024,
                      "default": 16
                    },
                    "maxRejectRate": {
                      "description": "Specifies the maximum rate per second at which the system issues reject packets (TCP RST or ICMP port unreach).",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": 250
                    },
                    "maxRejectRateTimeout": {
                      "description": "Specifies the time in seconds which the system ignores ICMP port unreach and TCP RST ratelimits on becoming active after a failover.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 300,
                      "default": 30
                    },
                    "minPathMtu": {
                      "description": "Specifies the minimum packet size that can traverse the path without suffering fragmentation",
                      "minimum": 68,
                      "maximum": 1500,
                      "default": 296
                    },
                    "pathMtuDiscovery": {
                      "description": "Specifies that the system discovers the MTU that it can send over a path without fragmenting TCP packets",
                      "type": "boolean",
                      "default": true
                    },
                    "portFindThresholdWarning": {
                      "description": "Specifies if the ephemeral port-exhaustion threshold warning is to be monitored.",
                      "type": "boolean",
                      "default": true
                    },
                    "portFindThresholdTrigger": {
                      "description": "Specifies the threshold warning's trigger which is the value of random port attempts when attempting to find an unused outbound port for a connection.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 12,
                      "default": 8
                    },
                    "portFindThresholdTimeout": {
                      "description": "Specifies the threshold warning's timeout which is the time in seconds since the last trigger value was hit and will drop the tuple if not hit.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 300,
                      "default": 30
                    },
                    "rejectUnmatched": {
                      "description": "Specifies, when enabled, that the system returns a TCP RST or ICMP port unreach packet if no virtual servers on the system match the destination address of the incoming packet. When disabled, the system silently drops the unmatched packet.",
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false,
                  "dependencies": {
                    "acceptIpSourceRoute": {
                      "if": {
                        "required": [
                          "acceptIpSourceRoute"
                        ],
                        "properties": {
                          "acceptIpSourceRoute": {
                            "const": true
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "acceptIpOptions"
                        ],
                        "properties": {
                          "acceptIpOptions": {
                            "const": true
                          }
                        }
                      }
                    },
                    "allowIpSourceRoute": {
                      "if": {
                        "required": [
                          "allowIpSourceRoute"
                        ],
                        "properties": {
                          "allowIpSourceRoute": {
                            "const": true
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "acceptIpOptions"
                        ],
                        "properties": {
                          "acceptIpOptions": {
                            "const": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SSHD"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "class": {
                      "description": "Indicates this contains SSH configuration.",
                      "type": "string",
                      "const": "SSHD"
                    },
                    "banner": {
                      "description": "Enables or disabled the display of the banner text field when a user logs in.",
                      "type": "string"
                    },
                    "ciphers": {
                      "description": "Specifies the ciphers to be included.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "3des-cbc",
                          "aes128-ctr",
                          "aes192-ctr",
                          "aes256-ctr",
                          "aes128-cbc",
                          "aes192-cbc",
                          "aes256-cbc",
                          "aes128-gcm@openssh.com",
                          "aes256-gcm@openssh.com",
                          "arcfour",
                          "arcfour128",
                          "arcfour256",
                          "blowfish-cbc",
                          "cast128-cbc",
                          "chacha20-poly1305@openssh.com"
                        ]
                      }
                    },
                    "inactivityTimeout": {
                      "description": "Specifies the number of seconds before inactivity causes an SSH session to log out.",
                      "type": "integer",
                      "default": 0,
                      "minimum": 0,
                      "maximum": 2147483647
                    },
                    "loginGraceTime": {
                      "description": "Specifies the login grace period that will be included. This is in the number of seconds.",
                      "type": "integer"
                    },
                    "MACS": {
                      "description": "Specifies the MACs that will be included.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "hmac-sha1",
                          "hmac-ripemd160",
                          "hmac-md5",
                          "hmac-md5-96",
                          "hmac-sha1-96",
                          "hmac-sha2-256",
                          "hmac-sha2-512",
                          "hmac-md5-etm@openssh.com",
                          "hmac-md5-96-etm@openssh.com",
                          "hmac-ripemd160-etm@openssh.com",
                          "hmac-sha1-etm@openssh.com",
                          "hmac-sha1-96-etm@openssh.com",
                          "hmac-sha2-256-etm@openssh.com",
                          "hmac-sha2-512-etm@openssh.com",
                          "umac-64@openssh.com",
                          "umac-128@openssh.com",
                          "umac-64-etm@openssh.com",
                          "umac-128-etm@openssh.com"
                        ]
                      }
                    },
                    "maxAuthTries": {
                      "description": "Specifies the max auth tries to be included.",
                      "type": "integer"
                    },
                    "maxStartups": {
                      "description": "Specifies the max startups to include.",
                      "type": "string"
                    },
                    "protocol": {
                      "description": "Specifies the protocol to be included.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 2
                    }
                  },
                  "additionalProperties": false
                }
              }
            ],
            "definitions": {
              "partitionAccess": {
                "description": "The partition - either 'Common' or 'all-partitions'.",
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "description": "Role for the user.",
                    "type": "string",
                    "enum": [
                      "admin",
                      "auditor",
                      "guest",
                      "manager",
                      "operator",
                      "user-manager",
                      "application-editor",
                      "certificate-manager",
                      "irule-manager",
                      "no-access",
                      "resource-admin"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "regKeyInfo": {
                "description": "Registration key information.",
                "required": [
                  "class",
                  "licenseType",
                  "regKey"
                ],
                "properties": {
                  "class": {
                    "description": "Indicates that this property contains licensing information.",
                    "type": "string",
                    "const": "License"
                  },
                  "licenseType": {
                    "description": "The type of license",
                    "type": "string",
                    "const": "regKey"
                  },
                  "regKey": {
                    "description": "Registration key.",
                    "type": "string",
                    "pattern": "^([A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{7})|([A-Z][0-9]{4}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{7})$"
                  },
                  "addOnKeys": {
                    "description": "Add on keys.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[A-Z]{7}-[A-Z]{7}$",
                      "uniqueItems": true
                    }
                  },
                  "overwrite": {
                    "description": "Whether or not to overwrite the license if the device is already licensed.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false
              },
              "licensePoolInfo": {
                "required": [
                  "class",
                  "licenseType"
                ],
                "if": {
                  "required": [
                    "reachable"
                  ],
                  "properties": {
                    "reachable": {
                      "const": false
                    }
                  }
                },
                "then": {
                  "if": {
                    "required": [
                      "licensePool"
                    ]
                  },
                  "then": {
                    "required": [
                      "hypervisor"
                    ]
                  }
                },
                "else": {
                  "if": {
                    "required": [
                      "licensePool"
                    ]
                  },
                  "then": {
                    "required": [
                      "bigIpUsername",
                      "bigIpPassword"
                    ]
                  }
                },
                "properties": {
                  "class": {
                    "description": "Indicates that this property contains licensing information.",
                    "type": "string",
                    "const": "License"
                  },
                  "licenseType": {
                    "description": "The type of license",
                    "type": "string",
                    "const": "licensePool"
                  },
                  "licensePool": {
                    "description": "Name of the BIG-IQ license pool from which to get a new license.",
                    "type": "string"
                  },
                  "skuKeyword1": {
                    "description": "skuKeyword1 parameter for subscription licensing.",
                    "type": "string"
                  },
                  "skuKeyword2": {
                    "description": "skuKeyword2 parameter for subscription licensing.",
                    "type": "string"
                  },
                  "unitOfMeasure": {
                    "description": "unitOfMeasure parameter for subscription licensing.",
                    "type": "string",
                    "enum": [
                      "yearly",
                      "monthly",
                      "daily",
                      "hourly"
                    ]
                  },
                  "hypervisor": {
                    "description": "Hypervisor which is running the BIG-IP. Required by BIG-IQ if 'reachable' is false.",
                    "type": "string",
                    "enum": [
                      "aws",
                      "azure",
                      "gce",
                      "vmware",
                      "hyperv",
                      "kvm",
                      "xen"
                    ]
                  },
                  "bigIpUsername": {
                    "description": "An admin user on the BIG-IP. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "json-pointer"
                      },
                      {
                        "pattern": "^.{0,254}$"
                      }
                    ]
                  },
                  "bigIpPassword": {
                    "description": "Password for the user in bigIpUsername. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "json-pointer"
                      },
                      {
                        "pattern": "^.{0,254}$"
                      }
                    ]
                  },
                  "overwrite": {
                    "description": "Whether or not to overwrite the license if the device is already licensed.",
                    "type": "boolean",
                    "default": false
                  },
                  "revokeFrom": {
                    "description": "Current license should be revoked from the pool specified. Either just the name of the pool (if old license is on the same BIG-IQ as in the main License section) or full licensePoolInfo (if old license is on a different BIG-IQ)",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "required": [
                          "licensePool"
                        ],
                        "properties": {
                          "licensePool": {
                            "description": "Name of the BIG-IQ license pool.",
                            "type": "string"
                          }
                        },
                        "allOf": [
                          {
                            "description": "BIG-IQ host/credentials information",
                            "type": "object",
                            "allOf": [
                              {
                                "if": {
                                  "required": [
                                    "bigIqPassword"
                                  ]
                                },
                                "then": {
                                  "dependencies": {
                                    "bigIqPasswordUri": {
                                      "not": {
                                        
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "if": {
                                  "required": [
                                    "bigIqHost"
                                  ]
                                },
                                "then": {
                                  "if": {
                                    "not": {
                                      "properties": {
                                        "bigIqHost": {
                                          "const": "localhost"
                                        }
                                      }
                                    }
                                  },
                                  "then": {
                                    "required": [
                                      "bigIqUsername"
                                    ],
                                    "oneOf": [
                                      {
                                        "required": [
                                          "bigIqPassword"
                                        ]
                                      },
                                      {
                                        "required": [
                                          "bigIqPasswordUri"
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            "properties": {
                              "bigIqHost": {
                                "description": "The BIG-IQ hostname or IP address.",
                                "type": "string",
                                "anyOf": [
                                  {
                                    "format": "ipv4"
                                  },
                                  {
                                    "format": "ipv6"
                                  },
                                  {
                                    "format": "hostname"
                                  }
                                ]
                              },
                              "bigIqUsername": {
                                "description": "An admin user on the BIG-IQ.",
                                "type": "string",
                                "anyOf": [
                                  {
                                    "format": "json-pointer"
                                  },
                                  {
                                    "pattern": "^[^:]{0,254}$"
                                  }
                                ]
                              },
                              "bigIqPassword": {
                                "description": "Password for the user in bigIqUsername.",
                                "type": "string",
                                "anyOf": [
                                  {
                                    "format": "json-pointer"
                                  },
                                  {
                                    "pattern": "^.{0,254}$"
                                  }
                                ]
                              },
                              "bigIqPasswordUri": {
                                "description": "URI which will return the password for the user in bigIqUsername.",
                                "type": "string",
                                "format": "uri"
                              },
                              "reachable": {
                                "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                                "type": "boolean",
                                "default": true
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "allOf": [
                  {
                    "description": "BIG-IQ host/credentials information",
                    "type": "object",
                    "allOf": [
                      {
                        "if": {
                          "required": [
                            "bigIqPassword"
                          ]
                        },
                        "then": {
                          "dependencies": {
                            "bigIqPasswordUri": {
                              "not": {
                                
                              }
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "required": [
                            "bigIqHost"
                          ]
                        },
                        "then": {
                          "if": {
                            "not": {
                              "properties": {
                                "bigIqHost": {
                                  "const": "localhost"
                                }
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "bigIqUsername"
                            ],
                            "oneOf": [
                              {
                                "required": [
                                  "bigIqPassword"
                                ]
                              },
                              {
                                "required": [
                                  "bigIqPasswordUri"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ],
                    "properties": {
                      "bigIqHost": {
                        "description": "The BIG-IQ hostname or IP address.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "ipv4"
                          },
                          {
                            "format": "ipv6"
                          },
                          {
                            "format": "hostname"
                          }
                        ]
                      },
                      "bigIqUsername": {
                        "description": "An admin user on the BIG-IQ.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "json-pointer"
                          },
                          {
                            "pattern": "^[^:]{0,254}$"
                          }
                        ]
                      },
                      "bigIqPassword": {
                        "description": "Password for the user in bigIqUsername.",
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "json-pointer"
                          },
                          {
                            "pattern": "^.{0,254}$"
                          }
                        ]
                      },
                      "bigIqPasswordUri": {
                        "description": "URI which will return the password for the user in bigIqUsername.",
                        "type": "string",
                        "format": "uri"
                      },
                      "reachable": {
                        "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                        "type": "boolean",
                        "default": true
                      }
                    }
                  }
                ]
              },
              "bigIqHostInfo": {
                "description": "BIG-IQ host/credentials information",
                "type": "object",
                "allOf": [
                  {
                    "if": {
                      "required": [
                        "bigIqPassword"
                      ]
                    },
                    "then": {
                      "dependencies": {
                        "bigIqPasswordUri": {
                          "not": {
                            
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "required": [
                        "bigIqHost"
                      ]
                    },
                    "then": {
                      "if": {
                        "not": {
                          "properties": {
                            "bigIqHost": {
                              "const": "localhost"
                            }
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "bigIqUsername"
                        ],
                        "oneOf": [
                          {
                            "required": [
                              "bigIqPassword"
                            ]
                          },
                          {
                            "required": [
                              "bigIqPasswordUri"
                            ]
                          }
                        ]
                      }
                    }
                  }
                ],
                "properties": {
                  "bigIqHost": {
                    "description": "The BIG-IQ hostname or IP address.",
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      },
                      {
                        "format": "hostname"
                      }
                    ]
                  },
                  "bigIqUsername": {
                    "description": "An admin user on the BIG-IQ.",
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "json-pointer"
                      },
                      {
                        "pattern": "^[^:]{0,254}$"
                      }
                    ]
                  },
                  "bigIqPassword": {
                    "description": "Password for the user in bigIqUsername.",
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "json-pointer"
                      },
                      {
                        "pattern": "^.{0,254}$"
                      }
                    ]
                  },
                  "bigIqPasswordUri": {
                    "description": "URI which will return the password for the user in bigIqUsername.",
                    "type": "string",
                    "format": "uri"
                  },
                  "reachable": {
                    "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          },
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/network.schema.json",
            "title": "F5 Declarative Onboarding network declaration",
            "description": "Network properties for onboarding a BIG-IP.",
            "allOf": [
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "Trunk"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains Trunk configuration.",
                      "type": "string",
                      "const": "Trunk"
                    },
                    "distributionHash": {
                      "description": "Specifies the basis for the hash that the system uses as the frame distribution algorithm.  Choices are 'dst-mac' (use the destination MAC addresses), 'src-dist-mac' (use the source, destination, and MAC addresses), or 'src-dst-ipport' (use the source and destination IP addresses and ports).",
                      "type": "string",
                      "enum": [
                        "dst-mac",
                        "src-dst-ipport",
                        "src-dst-mac"
                      ],
                      "default": "dst-mac"
                    },
                    "interfaces": {
                      "description": "Interfaces for the Trunk.  The number of interfaces used is recommended to be a power of 2 (for example 2, 4, or 8).  Interfaces must be untagged.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [
                        
                      ]
                    },
                    "lacpEnabled": {
                      "description": "Specifies, when true, that the system supports the link aggregation control protocol (LACP), which monitors the trunk by exchanging control packets over the member links to determine the health of the links.",
                      "type": "boolean",
                      "default": false
                    },
                    "lacpMode": {
                      "description": "Specifies the operation mode for LACP if the lacp option is enabled for the trunk.  The values are 'active' (specifies the system periodically transmits LACP packets, regardless of the control value of the peer system) and 'passive' (specifies the system periodically transmits LACP packets, unless the control value of the peer system is active).",
                      "type": "string",
                      "enum": [
                        "active",
                        "passive"
                      ],
                      "default": "active"
                    },
                    "lacpTimeout": {
                      "description": "Specifies the rate at which the system sends the LACP control packets.",
                      "type": "string",
                      "enum": [
                        "long",
                        "short"
                      ],
                      "default": "long"
                    },
                    "linkSelectPolicy": {
                      "description": "Sets the LACP policy that the trunk uses to determine which member link (interface) can handle new traffic.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "maximum-bandwidth"
                      ],
                      "default": "auto"
                    },
                    "qinqEthertype": {
                      "description": "Specifies the ether-type value used for the packets handled on this trunk when it is a member in a QinQ vlan.",
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{4}$",
                      "default": "0x8100"
                    },
                    "spanningTreeEnabled": {
                      "description": "Enables the spanning tree protocols (STP).",
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "VLAN"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "interfaces"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains VLAN configuration.",
                      "type": "string",
                      "const": "VLAN"
                    },
                    "mtu": {
                      "description": "MTU for the VLAN.",
                      "type": "integer",
                      "minimum": 576,
                      "maximum": 9198,
                      "default": 1500
                    },
                    "tag": {
                      "description": "Tag for the VLAN.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 4094
                    },
                    "interfaces": {
                      "description": "Interfaces for the VLAN.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the interface.",
                            "type": "string"
                          },
                          "tagged": {
                            "description": "Whether or not the interface is tagged. Default is true if a VLAN tag is provided, otherwise false.",
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "cmpHash": {
                      "description": "Specifies how the traffic on the VLAN will be disaggregated.",
                      "type": "string",
                      "enum": [
                        "default",
                        "dst-ip",
                        "src-ip"
                      ],
                      "default": "default"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "SelfIp"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "address",
                    "vlan"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains Self IP configuration.",
                      "type": "string",
                      "const": "SelfIp"
                    },
                    "address": {
                      "description": "IP address.",
                      "type": "string",
                      "format": "f5ip"
                    },
                    "trafficGroup": {
                      "description": "Traffic group for the Self IP.",
                      "type": "string",
                      "enum": [
                        "traffic-group-local-only",
                        "traffic-group-1"
                      ],
                      "default": "traffic-group-local-only"
                    },
                    "vlan": {
                      "description": "VLAN for the self IP.",
                      "type": "string"
                    },
                    "allowService": {
                      "description": "Which services (ports) to allow on the self IP. Value should be 'all', 'none', 'default', or array of '<service:port>",
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "all",
                            "none",
                            "default"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "(\\w+:\\d+)"
                          }
                        }
                      ],
                      "default": "default"
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "Route"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "gw"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains Route configuration.",
                      "type": "string",
                      "const": "Route"
                    },
                    "gw": {
                      "description": "Gateway for the route.",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        }
                      ]
                    },
                    "network": {
                      "description": "IP address/netmask for route",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "f5ip"
                        },
                        {
                          "enum": [
                            "default",
                            "default-inet6"
                          ]
                        }
                      ],
                      "default": "default"
                    },
                    "mtu": {
                      "description": "MTU for the route.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 9198
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "RouteDomain"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "id"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains Route Domain configuration.",
                      "type": "string",
                      "const": "RouteDomain"
                    },
                    "id": {
                      "description": "Specifies a unique numeric identifier for the route domain.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65534
                    },
                    "bandWidthControllerPolicy": {
                      "description": "Specifies the bandwidth controller policy for the route domain.",
                      "type": "string"
                    },
                    "connectionLimit": {
                      "description": "The connection limit for the route domain.",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 4294967295,
                      "default": 0
                    },
                    "flowEvictionPolicy": {
                      "description": "Specifies a flow eviction policy for the route domain to use.",
                      "type": "string"
                    },
                    "ipIntelligencePolicy": {
                      "description": "Specifies an IP intelligence policy for the route domain to use.",
                      "type": "string"
                    },
                    "enforcedFirewallPolicy": {
                      "description": "Specifies an enforced firewall policy on the route domain.",
                      "type": "string"
                    },
                    "stagedFirewallPolicy": {
                      "description": "Specifies a staged firewall policy on the route domain.",
                      "type": "string"
                    },
                    "securityNatPolicy": {
                      "description": "Specifies the security NAT policy for the route domain.",
                      "type": "string"
                    },
                    "servicePolicy": {
                      "description": "Specifies the service policy for the route domain.",
                      "type": "string"
                    },
                    "strict": {
                      "description": "Determines whether a connection can span route domains.",
                      "type": "boolean",
                      "default": true
                    },
                    "routingProtocols": {
                      "description": "Specifies routing protocols for the system to use in the route domain.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "BFD",
                          "BGP",
                          "IS-IS",
                          "OSPFv2",
                          "OSPFv3",
                          "PIM",
                          "RIP",
                          "RIPng"
                        ]
                      }
                    },
                    "vlans": {
                      "description": "Specifies VLANS for the system to use in the route domain.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DagGlobals"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains DAG Globals configuration.",
                      "type": "string",
                      "const": "DagGlobals"
                    },
                    "icmpHash": {
                      "description": "Specifies ICMP hash for ICMP echo request and ICMP echo reply in SW DAG.",
                      "type": "string",
                      "enum": [
                        "icmp",
                        "ipicmp"
                      ],
                      "default": "icmp"
                    },
                    "ipv6PrefixLength": {
                      "description": "Specifies whether SPDAG or IPv6 prefix DAG should be used to disaggregate IPv6 traffic when vlan cmp hash is set to src-ip or dst-ip.",
                      "type": "integer",
                      "default": 128,
                      "minimum": 0,
                      "maximum": 128
                    },
                    "roundRobinMode": {
                      "description": "Specifies whether the round robin disaggregator (DAG) on a blade can disaggregate packets to all the TMMs in the system or only to the TMMs local to the blade.",
                      "type": "string",
                      "enum": [
                        "global",
                        "local"
                      ],
                      "default": "global"
                    }
                  },
                  "additionalProperties": false
                }
              }
            ]
          },
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/dsc.schema.json",
            "title": "F5 Declarative Onboarding DSC declaration",
            "description": "Clustering properties for onboarding a BIG-IP.",
            "allOf": [
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "ConfigSync"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "configsyncIp"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains config sync IP configuration.",
                      "type": "string",
                      "const": "ConfigSync"
                    },
                    "configsyncIp": {
                      "description": "ConfigSync IP",
                      "type": "string",
                      "anyOf": [
                        {
                          "const": "none"
                        },
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        },
                        {
                          "format": "json-pointer"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "FailoverUnicast"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "address"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains failover unicast address configuration.",
                      "type": "string",
                      "const": "FailoverUnicast"
                    },
                    "address": {
                      "description": "IP address to listen on for failover heartbeats",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        },
                        {
                          "format": "json-pointer"
                        }
                      ]
                    },
                    "port": {
                      "description": "Port to listen on for failover heartbeats",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 65535,
                      "default": 1026
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DeviceGroup"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "type",
                    "owner"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains device group configuration.",
                      "type": "string",
                      "const": "DeviceGroup"
                    },
                    "type": {
                      "description": "Type of the device group",
                      "type": "string",
                      "enum": [
                        "sync-failover",
                        "sync-only"
                      ]
                    },
                    "owner": {
                      "description": "Owning device. Config will be pushed from this device. If this is present, device group will only be created if the current device is the owner. If not present, device group will be created if it does not exist",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "hostname"
                        },
                        {
                          "format": "json-pointer"
                        }
                      ]
                    },
                    "members": {
                      "description": "Members to add to the device group if they are already in the trust domain",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "anyOf": [
                          {
                            "format": "ipv4"
                          },
                          {
                            "format": "ipv6"
                          },
                          {
                            "format": "hostname"
                          }
                        ]
                      }
                    },
                    "autoSync": {
                      "description": "Whether or not the device group should auto sync",
                      "type": "boolean",
                      "default": false
                    },
                    "saveOnAutoSync": {
                      "description": "Whether or not the device group should save on auto sync",
                      "type": "boolean",
                      "default": false
                    },
                    "networkFailover": {
                      "description": "Whether or not the device group supports network failover",
                      "type": "boolean",
                      "default": false
                    },
                    "asmSync": {
                      "description": "Whether or not the device group should sync ASM properties",
                      "type": "boolean",
                      "default": false
                    },
                    "fullLoadOnSync": {
                      "description": "Whether or not the device group should do a full load on sync",
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "if": {
                    "required": [
                      "class"
                    ],
                    "properties": {
                      "type": {
                        "const": "sync-failover"
                      }
                    }
                  },
                  "then": {
                    "if": {
                      "required": [
                        "autoSync"
                      ],
                      "properties": {
                        "autoSync": {
                          "const": true
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "fullLoadOnSync": {
                          "const": false
                        }
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "const": "DeviceTrust"
                    }
                  }
                },
                "then": {
                  "required": [
                    "class",
                    "localUsername",
                    "localPassword",
                    "remoteHost",
                    "remoteUsername",
                    "remotePassword"
                  ],
                  "properties": {
                    "class": {
                      "description": "Indicates that this property contains device trust configuration.",
                      "type": "string",
                      "const": "DeviceTrust"
                    },
                    "localUsername": {
                      "description": "The username for the local device",
                      "type": "string"
                    },
                    "localPassword": {
                      "description": "The password for the localUsername",
                      "type": "string"
                    },
                    "remoteHost": {
                      "description": "The remote hostname or IP address",
                      "type": "string",
                      "anyOf": [
                        {
                          "format": "ipv4"
                        },
                        {
                          "format": "ipv6"
                        },
                        {
                          "format": "hostname"
                        },
                        {
                          "format": "json-pointer"
                        }
                      ]
                    },
                    "remoteUsername": {
                      "description": "An admin user on the remote host",
                      "type": "string"
                    },
                    "remotePassword": {
                      "description": "Password for the remote user in remoteUsername",
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/analytics.schema.json",
            "title": "F5 Declarative Onboarding Global Analytics declaration",
            "description": "Global analytics properties for onboarding a BIG-IP.",
            "if": {
              "required": [
                "class"
              ],
              "properties": {
                "class": {
                  "const": "Analytics"
                }
              }
            },
            "then": {
              "required": [
                "class"
              ],
              "properties": {
                "class": {
                  "description": "Indicates that this property contains global analytics configuration",
                  "type": "string",
                  "const": "Analytics"
                },
                "debugEnabled": {
                  "description": "Enable debug mode.  If debug mode is disabled, internal statistics are collected only if interval is set to the default value (300 seconds)",
                  "type": "boolean",
                  "default": false
                },
                "interval": {
                  "description": "Analytics data collection interval in seconds.  If this interval is different from the default value (300 seconds), internal statistics are not collected unless debugEnabled is set to true.  Minimum interval is 20 seconds, maximum interval is 300 seconds.",
                  "type": "integer",
                  "minimum": 20,
                  "maximum": 300,
                  "default": 300
                },
                "sourceId": {
                  "description": "Unique value to signify the source of data",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Unique id for the tenant using the analytics backend system",
                  "type": "string"
                },
                "offboxProtocol": {
                  "description": "Protocol for communication with offbox analytics application",
                  "type": "string",
                  "enum": [
                    "https",
                    "tcp"
                  ]
                },
                "offboxTcpAddresses": {
                  "description": "Server IP addresses used only if the 'tcp/https' protocol is chosen",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      },
                      {
                        "format": "json-pointer"
                      }
                    ]
                  }
                },
                "offboxTcpPort": {
                  "description": "Server TCP port for the server IP addresses used only if the 'tcp' protocol is chosen",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 65535
                },
                "offboxEnabled": {
                  "description": "Enables all communication with the offbox application on the global level",
                  "type": "boolean",
                  "default": false
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "offboxEnabled": {
                        "const": true
                      }
                    },
                    "required": [
                      "offboxEnabled"
                    ]
                  },
                  "then": {
                    "required": [
                      "offboxProtocol"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "offboxTcpPort": {
                        "minimum": 1
                      }
                    },
                    "required": [
                      "offboxTcpPort"
                    ]
                  },
                  "then": {
                    "required": [
                      "offboxTcpAddresses",
                      "offboxProtocol"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "offboxTcpAddresses": {
                        "minItems": 1
                      }
                    },
                    "required": [
                      "offboxTcpAddresses"
                    ]
                  },
                  "then": {
                    "required": [
                      "offboxTcpPort",
                      "offboxProtocol"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "offboxProtocol": {
                        "enum": [
                          "tcp",
                          "https"
                        ]
                      }
                    },
                    "required": [
                      "offboxProtocol"
                    ]
                  },
                  "then": {
                    "properties": {
                      "offboxTcpPort": {
                        "minimum": 1
                      },
                      "offboxTcpAddresses": {
                        "minItems": 1
                      }
                    },
                    "required": [
                      "offboxTcpAddresses",
                      "offboxTcpPort"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "offboxProtocol": {
                        "enum": [
                          "https"
                        ]
                      }
                    },
                    "required": [
                      "offboxProtocol"
                    ]
                  },
                  "then": {
                    "required": [
                      "sourceId"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          },
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/auth.schema.json",
            "title": "F5 Declarative Onboarding Authentication declaration",
            "description": "Authentication properties for onboarding a BIG-IP.",
            "allOf": [
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "type": "object",
                  "properties": {
                    "class": {
                      "const": "RemoteAuthRole"
                    }
                  }
                },
                "then": {
                  "oneOf": [
                    {
                      "description": "Creates a file used by LDAP, Active Directory(r), RADIUS, or TACAS+ server to determine specific access rights.",
                      "type": "object",
                      "required": [
                        "class",
                        "attribute",
                        "lineOrder",
                        "userPartition"
                      ],
                      "properties": {
                        "class": {
                          "description": "Indicates that this property contains RemoteAuthRole configuration.",
                          "type": "string",
                          "const": "RemoteAuthRole"
                        },
                        "attribute": {
                          "description": "Specifies an attribute-value pair that an authentication server supplies to the BIG-IP system to match against entries in /config/bigip/auth/remoterole. The specified pair typically identifies users with access rights in common. This option is required.",
                          "type": "string"
                        },
                        "console": {
                          "description": "Specifes if the remotely-authenticated users have tmsh console access or not. Accepted values are 'disabled' and 'tmsh'.",
                          "type": "string",
                          "enum": [
                            "disabled",
                            "tmsh"
                          ],
                          "default": "disabled"
                        },
                        "remoteAccess": {
                          "description": "Enables the specified group of remotely-authenticated users, remote access.",
                          "type": "boolean",
                          "default": false
                        },
                        "lineOrder": {
                          "description": "The BIG-IP only allows one role per user for each partition/tenant.  Because some remote servers allow multiple user roles, the BIG-IP uses the lineOrder parameter to choose one of the conflicting roles for the user at login time. In these cases, the system chooses the role with the lowest line-order number.  See line order in the BIG-IP documentation for more information and examples.",
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "role": {
                          "description": "Specifies the role that you want to grant to the specified group of remotely-authenticated users.",
                          "type": "string",
                          "enum": [
                            "admin",
                            "application-editor",
                            "auditor",
                            "certificate-manager",
                            "firewall-manager",
                            "fraud-protection-manager",
                            "guest",
                            "irule-manager",
                            "manager",
                            "no-access",
                            "operator",
                            "resource-admin",
                            "user-manager",
                            "web-application-security-administrator",
                            "web-application-security-editor"
                          ],
                          "default": "no-access"
                        },
                        "userPartition": {
                          "description": "Specifies the BIG-IP partition to which you are assigning access to the specified group of remotely-authenticated users. The default value is Common. This option is required.",
                          "type": "string",
                          "default": "Common",
                          "enum": [
                            "all",
                            "Common"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              },
              {
                "if": {
                  "required": [
                    "class"
                  ],
                  "type": "object",
                  "properties": {
                    "class": {
                      "const": "Authentication"
                    }
                  }
                },
                "then": {
                  "oneOf": [
                    {
                      "required": [
                        "class",
                        "enabledSourceType"
                      ],
                      "type": "object",
                      "description": "Remote authentication info.",
                      "properties": {
                        "class": {
                          "description": "Indicates that this property contains authentication configuration.",
                          "type": "string",
                          "const": "Authentication"
                        },
                        "enabledSourceType": {
                          "description": "Type of remote authentication source to enable for the system.",
                          "type": "string",
                          "enum": [
                            "radius",
                            "local",
                            "tacacs",
                            "ldap",
                            "activeDirectory"
                          ],
                          "default": "local"
                        },
                        "remoteUsersDefaults": {
                          "description": "The default values that the BIG-IP system applies to any user account that is not part of a remotely-stored user group.",
                          "type": "object",
                          "required": [
                            "partitionAccess",
                            "terminalAccess",
                            "role"
                          ],
                          "properties": {
                            "role": {
                              "description": "Role for the remote users.",
                              "type": "string",
                              "enum": [
                                "acceleration-policy-editor",
                                "admin",
                                "application-editor",
                                "auditor",
                                "certificate-manager",
                                "firewall-manager",
                                "fraud-protection-manager",
                                "guest",
                                "irule-manager",
                                "manager",
                                "no-access",
                                "operator",
                                "resource-admin",
                                "user-manager",
                                "web-application-security-administrator",
                                "web-application-security-editor"
                              ],
                              "default": "no-access"
                            },
                            "partitionAccess": {
                              "description": "Default accessible partitions for remote users.",
                              "type": "string",
                              "enum": [
                                "Common",
                                "all"
                              ],
                              "default": "all"
                            },
                            "terminalAccess": {
                              "description": "Default terminal access for remote users.",
                              "type": "string",
                              "enum": [
                                "tmsh",
                                "disabled"
                              ],
                              "default": "disabled"
                            }
                          },
                          "additionalProperties": false
                        },
                        "fallback": {
                          "description": "Specifies that the system uses the Local authentication method if the remote authentication method is not available.",
                          "type": "boolean",
                          "default": false
                        },
                        "radius": {
                          "description": "Remote RADIUS authentication info.",
                          "type": "object",
                          "required": [
                            "servers"
                          ],
                          "properties": {
                            "serviceType": {
                              "description": "Type of service used for the RADIUS server.",
                              "type": "string",
                              "enum": [
                                "administrative",
                                "authenticate-only",
                                "call-check",
                                "callback-administrative",
                                "callback-framed",
                                "callback-login",
                                "callback-nas-prompt",
                                "default",
                                "framed",
                                "login",
                                "nas-prompt",
                                "outbound"
                              ],
                              "default": "default"
                            },
                            "servers": {
                              "description": "RADIUS servers settings",
                              "required": [
                                "primary"
                              ],
                              "properties": {
                                "primary": {
                                  "description": "Server connection settings for the primary RADIUS server",
                                  "allOf": [
                                    {
                                      "description": "RADIUS server connection settings.",
                                      "type": "object",
                                      "required": [
                                        "server",
                                        "secret"
                                      ],
                                      "properties": {
                                        "server": {
                                          "type": "string",
                                          "description": "The RADIUS server IP address or hostname.",
                                          "anyOf": [
                                            {
                                              "format": "ipv4"
                                            },
                                            {
                                              "format": "ipv6"
                                            },
                                            {
                                              "format": "hostname"
                                            }
                                          ]
                                        },
                                        "port": {
                                          "type": "integer",
                                          "description": "Port to use when connecting to the RADIUS server.",
                                          "default": 1812
                                        },
                                        "secret": {
                                          "description": "Password to use when connection to the RADIUS server.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "secondary": {
                                  "description": "Server connection settings for the secondary RADIUS server (optional)",
                                  "allOf": [
                                    {
                                      "description": "RADIUS server connection settings.",
                                      "type": "object",
                                      "required": [
                                        "server",
                                        "secret"
                                      ],
                                      "properties": {
                                        "server": {
                                          "type": "string",
                                          "description": "The RADIUS server IP address or hostname.",
                                          "anyOf": [
                                            {
                                              "format": "ipv4"
                                            },
                                            {
                                              "format": "ipv6"
                                            },
                                            {
                                              "format": "hostname"
                                            }
                                          ]
                                        },
                                        "port": {
                                          "type": "integer",
                                          "description": "Port to use when connecting to the RADIUS server.",
                                          "default": 1812
                                        },
                                        "secret": {
                                          "description": "Password to use when connection to the RADIUS server.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          }
                        },
                        "tacacs": {
                          "description": "TACACS+ authentication info",
                          "type": "object",
                          "required": [
                            "secret",
                            "servers",
                            "service"
                          ],
                          "properties": {
                            "accounting": {
                              "description": "Specifies how the system returns accounting information, such as which services users access and how much network resources they consume, to the TACACS+ server. The default setting is Send to first available server.",
                              "type": "string",
                              "enum": [
                                "send-to-all-servers",
                                "send-to-first-server"
                              ],
                              "default": "send-to-first-server"
                            },
                            "authentication": {
                              "description": "Specifies the process the system employs when sending authentication requests. The default is Authenticate to first server.",
                              "type": "string",
                              "enum": [
                                "use-all-servers",
                                "use-first-server"
                              ],
                              "default": "use-first-server"
                            },
                            "debug": {
                              "description": "Specifies whether to log Syslog debugging information at the LOG_DEBUG level. We do not recommend enabling this setting for normal use. The default is Disabled.",
                              "type": "boolean",
                              "default": false
                            },
                            "encryption": {
                              "description": "Specifies whether to use encryption of TACACS+ packets. The default is Enabled.",
                              "type": "boolean",
                              "default": true
                            },
                            "protocol": {
                              "description": "Specifies the protocol associated with the value specified in Service Name, which is a subset of the associated service being used for client authorization or system accounting. You can use following values: lcp, ip, ipx, atalk, vines, lat, xremote, tn3270, telnet, rlogin, pad, vpdn, ftp, http, deccp, osicp, and unknown. Note that the majority of TACACS+ implementations are of protocol type ip, so try that first.",
                              "type": "string",
                              "enum": [
                                "lcp",
                                "ip",
                                "ipx",
                                "atalk",
                                "vines",
                                "lat",
                                "xremote",
                                "tn3270",
                                "telnet",
                                "rlogin",
                                "pad",
                                "vpdn",
                                "ftp",
                                "http",
                                "deccp",
                                "osicp",
                                "unknown"
                              ]
                            },
                            "secret": {
                              "description": "Type the secret key used to encrypt and decrypt packets sent or received from the server. Do not use the pound sign ( # ) in the secret for TACACS+ servers.",
                              "type": "string"
                            },
                            "servers": {
                              "description": "Specifies a list of the IPv4 addresses for servers using the Terminal Access Controller Access System (TACACS)+ protocol with which the system communicates to obtain authorization data. For each address, an alternate TCP port number may be optionally specified by entering the address in the format address:port. If no port number is specified, the default port 49 is used.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "minItems": 1
                            },
                            "service": {
                              "description": "Specifies the name of the service that the user is requesting to be authorized to use. Identifying what the user is asking to be authorized for, enables the TACACS+ server to behave differently for different types of authorization requests. You can use following values: slip, ppp, arap, shell, tty-daemon, connection, system, and firewall. Specifying this setting is required. Note that the majority of TACACS+ implementations are of service type ppp, so try that first.",
                              "type": "string",
                              "enum": [
                                "slip",
                                "ppp",
                                "arap",
                                "shell",
                                "tty-daemon",
                                "connection",
                                "system",
                                "firewall"
                              ]
                            }
                          }
                        },
                        "ldap": {
                          "description": "Remote LDAP authentication info",
                          "type": "object",
                          "required": [
                            "servers"
                          ],
                          "properties": {
                            "bindDn": {
                              "description": "Distinguished name of the server account. If server is a Microsoft Windows Active Directory server, the name must be an email address",
                              "type": "string"
                            },
                            "bindPassword": {
                              "description": "Password for the server account",
                              "type": "string"
                            },
                            "bindTimeout": {
                              "description": "Timeout limit in seconds to bind to remote authentication server",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 4294967295,
                              "default": 30
                            },
                            "checkBindPassword": {
                              "description": "Confirms the password for the server account",
                              "type": "boolean",
                              "default": false
                            },
                            "checkRemoteRole": {
                              "description": "Verifies a user's group membership based on the remote-role definition, formatted as *member*of=\"group-dn\"",
                              "type": "boolean",
                              "default": false
                            },
                            "filter": {
                              "description": "Filter used for authorizing client traffic",
                              "type": "string"
                            },
                            "groupDn": {
                              "description": "Group distinguished name for authorizing client traffic",
                              "type": "string"
                            },
                            "groupMemberAttribute": {
                              "description": "Group member attribute for authorizing client traffic",
                              "type": "string"
                            },
                            "idleTimeout": {
                              "description": "Connection timeout limit in seconds",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 4294967295,
                              "default": 3600
                            },
                            "ignoreAuthInfoUnavailable": {
                              "description": "Ignores authentication information if not available",
                              "type": "boolean",
                              "default": false
                            },
                            "ignoreUnknownUser": {
                              "description": "Ignores a user that is unknown",
                              "type": "boolean",
                              "default": false
                            },
                            "loginAttribute": {
                              "description": "Logon attribute. If server is a Microsoft Windows Active Directory server, the value must be the account name \"samaccountname\"",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port number for the LDAP service",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535,
                              "default": 389
                            },
                            "searchScope": {
                              "description": "Level of remote server's directory to search for user authentication, either base object, one level, or subtree",
                              "type": "string",
                              "enum": [
                                "base",
                                "one",
                                "sub"
                              ],
                              "default": "sub"
                            },
                            "searchBaseDn": {
                              "description": "Search base distinguished name",
                              "type": "string"
                            },
                            "searchTimeout": {
                              "description": "Search timeout limit in seconds",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 4294967295,
                              "default": 30
                            },
                            "servers": {
                              "description": "IP addresses or hostnames of the remote authentication servers.",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "string"
                              }
                            },
                            "userTemplate": {
                              "description": "Specifies a user template for the LDAP application to use for authentication.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Specifies the version number of the LDAP application.",
                              "type": "integer",
                              "minimum": 2,
                              "maximum": 3,
                              "default": 3
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "allOf": [
                        {
                          "if": {
                            "required": [
                              "enabledSourceType"
                            ],
                            "properties": {
                              "enabledSourceType": {
                                "const": "radius"
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "radius"
                            ]
                          }
                        },
                        {
                          "if": {
                            "required": [
                              "enabledSourceType"
                            ],
                            "properties": {
                              "enabledSourceType": {
                                "const": "tacacs"
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "tacacs"
                            ]
                          }
                        },
                        {
                          "if": {
                            "required": [
                              "enabledSourceType"
                            ],
                            "properties": {
                              "enabledSourceType": {
                                "oneOf": [
                                  {
                                    "const": "ldap"
                                  },
                                  {
                                    "const": "activeDirectory"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "ldap"
                            ]
                          }
                        }
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              }
            ],
            "definitions": {
              "remoteInfo": {
                "required": [
                  "class",
                  "enabledSourceType"
                ],
                "type": "object",
                "description": "Remote authentication info.",
                "properties": {
                  "class": {
                    "description": "Indicates that this property contains authentication configuration.",
                    "type": "string",
                    "const": "Authentication"
                  },
                  "enabledSourceType": {
                    "description": "Type of remote authentication source to enable for the system.",
                    "type": "string",
                    "enum": [
                      "radius",
                      "local",
                      "tacacs",
                      "ldap",
                      "activeDirectory"
                    ],
                    "default": "local"
                  },
                  "remoteUsersDefaults": {
                    "description": "The default values that the BIG-IP system applies to any user account that is not part of a remotely-stored user group.",
                    "type": "object",
                    "required": [
                      "partitionAccess",
                      "terminalAccess",
                      "role"
                    ],
                    "properties": {
                      "role": {
                        "description": "Role for the remote users.",
                        "type": "string",
                        "enum": [
                          "acceleration-policy-editor",
                          "admin",
                          "application-editor",
                          "auditor",
                          "certificate-manager",
                          "firewall-manager",
                          "fraud-protection-manager",
                          "guest",
                          "irule-manager",
                          "manager",
                          "no-access",
                          "operator",
                          "resource-admin",
                          "user-manager",
                          "web-application-security-administrator",
                          "web-application-security-editor"
                        ],
                        "default": "no-access"
                      },
                      "partitionAccess": {
                        "description": "Default accessible partitions for remote users.",
                        "type": "string",
                        "enum": [
                          "Common",
                          "all"
                        ],
                        "default": "all"
                      },
                      "terminalAccess": {
                        "description": "Default terminal access for remote users.",
                        "type": "string",
                        "enum": [
                          "tmsh",
                          "disabled"
                        ],
                        "default": "disabled"
                      }
                    },
                    "additionalProperties": false
                  },
                  "fallback": {
                    "description": "Specifies that the system uses the Local authentication method if the remote authentication method is not available.",
                    "type": "boolean",
                    "default": false
                  },
                  "radius": {
                    "description": "Remote RADIUS authentication info.",
                    "type": "object",
                    "required": [
                      "servers"
                    ],
                    "properties": {
                      "serviceType": {
                        "description": "Type of service used for the RADIUS server.",
                        "type": "string",
                        "enum": [
                          "administrative",
                          "authenticate-only",
                          "call-check",
                          "callback-administrative",
                          "callback-framed",
                          "callback-login",
                          "callback-nas-prompt",
                          "default",
                          "framed",
                          "login",
                          "nas-prompt",
                          "outbound"
                        ],
                        "default": "default"
                      },
                      "servers": {
                        "description": "RADIUS servers settings",
                        "required": [
                          "primary"
                        ],
                        "properties": {
                          "primary": {
                            "description": "Server connection settings for the primary RADIUS server",
                            "allOf": [
                              {
                                "description": "RADIUS server connection settings.",
                                "type": "object",
                                "required": [
                                  "server",
                                  "secret"
                                ],
                                "properties": {
                                  "server": {
                                    "type": "string",
                                    "description": "The RADIUS server IP address or hostname.",
                                    "anyOf": [
                                      {
                                        "format": "ipv4"
                                      },
                                      {
                                        "format": "ipv6"
                                      },
                                      {
                                        "format": "hostname"
                                      }
                                    ]
                                  },
                                  "port": {
                                    "type": "integer",
                                    "description": "Port to use when connecting to the RADIUS server.",
                                    "default": 1812
                                  },
                                  "secret": {
                                    "description": "Password to use when connection to the RADIUS server.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "secondary": {
                            "description": "Server connection settings for the secondary RADIUS server (optional)",
                            "allOf": [
                              {
                                "description": "RADIUS server connection settings.",
                                "type": "object",
                                "required": [
                                  "server",
                                  "secret"
                                ],
                                "properties": {
                                  "server": {
                                    "type": "string",
                                    "description": "The RADIUS server IP address or hostname.",
                                    "anyOf": [
                                      {
                                        "format": "ipv4"
                                      },
                                      {
                                        "format": "ipv6"
                                      },
                                      {
                                        "format": "hostname"
                                      }
                                    ]
                                  },
                                  "port": {
                                    "type": "integer",
                                    "description": "Port to use when connecting to the RADIUS server.",
                                    "default": 1812
                                  },
                                  "secret": {
                                    "description": "Password to use when connection to the RADIUS server.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "tacacs": {
                    "description": "TACACS+ authentication info",
                    "type": "object",
                    "required": [
                      "secret",
                      "servers",
                      "service"
                    ],
                    "properties": {
                      "accounting": {
                        "description": "Specifies how the system returns accounting information, such as which services users access and how much network resources they consume, to the TACACS+ server. The default setting is Send to first available server.",
                        "type": "string",
                        "enum": [
                          "send-to-all-servers",
                          "send-to-first-server"
                        ],
                        "default": "send-to-first-server"
                      },
                      "authentication": {
                        "description": "Specifies the process the system employs when sending authentication requests. The default is Authenticate to first server.",
                        "type": "string",
                        "enum": [
                          "use-all-servers",
                          "use-first-server"
                        ],
                        "default": "use-first-server"
                      },
                      "debug": {
                        "description": "Specifies whether to log Syslog debugging information at the LOG_DEBUG level. We do not recommend enabling this setting for normal use. The default is Disabled.",
                        "type": "boolean",
                        "default": false
                      },
                      "encryption": {
                        "description": "Specifies whether to use encryption of TACACS+ packets. The default is Enabled.",
                        "type": "boolean",
                        "default": true
                      },
                      "protocol": {
                        "description": "Specifies the protocol associated with the value specified in Service Name, which is a subset of the associated service being used for client authorization or system accounting. You can use following values: lcp, ip, ipx, atalk, vines, lat, xremote, tn3270, telnet, rlogin, pad, vpdn, ftp, http, deccp, osicp, and unknown. Note that the majority of TACACS+ implementations are of protocol type ip, so try that first.",
                        "type": "string",
                        "enum": [
                          "lcp",
                          "ip",
                          "ipx",
                          "atalk",
                          "vines",
                          "lat",
                          "xremote",
                          "tn3270",
                          "telnet",
                          "rlogin",
                          "pad",
                          "vpdn",
                          "ftp",
                          "http",
                          "deccp",
                          "osicp",
                          "unknown"
                        ]
                      },
                      "secret": {
                        "description": "Type the secret key used to encrypt and decrypt packets sent or received from the server. Do not use the pound sign ( # ) in the secret for TACACS+ servers.",
                        "type": "string"
                      },
                      "servers": {
                        "description": "Specifies a list of the IPv4 addresses for servers using the Terminal Access Controller Access System (TACACS)+ protocol with which the system communicates to obtain authorization data. For each address, an alternate TCP port number may be optionally specified by entering the address in the format address:port. If no port number is specified, the default port 49 is used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      },
                      "service": {
                        "description": "Specifies the name of the service that the user is requesting to be authorized to use. Identifying what the user is asking to be authorized for, enables the TACACS+ server to behave differently for different types of authorization requests. You can use following values: slip, ppp, arap, shell, tty-daemon, connection, system, and firewall. Specifying this setting is required. Note that the majority of TACACS+ implementations are of service type ppp, so try that first.",
                        "type": "string",
                        "enum": [
                          "slip",
                          "ppp",
                          "arap",
                          "shell",
                          "tty-daemon",
                          "connection",
                          "system",
                          "firewall"
                        ]
                      }
                    }
                  },
                  "ldap": {
                    "description": "Remote LDAP authentication info",
                    "type": "object",
                    "required": [
                      "servers"
                    ],
                    "properties": {
                      "bindDn": {
                        "description": "Distinguished name of the server account. If server is a Microsoft Windows Active Directory server, the name must be an email address",
                        "type": "string"
                      },
                      "bindPassword": {
                        "description": "Password for the server account",
                        "type": "string"
                      },
                      "bindTimeout": {
                        "description": "Timeout limit in seconds to bind to remote authentication server",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "default": 30
                      },
                      "checkBindPassword": {
                        "description": "Confirms the password for the server account",
                        "type": "boolean",
                        "default": false
                      },
                      "checkRemoteRole": {
                        "description": "Verifies a user's group membership based on the remote-role definition, formatted as *member*of=\"group-dn\"",
                        "type": "boolean",
                        "default": false
                      },
                      "filter": {
                        "description": "Filter used for authorizing client traffic",
                        "type": "string"
                      },
                      "groupDn": {
                        "description": "Group distinguished name for authorizing client traffic",
                        "type": "string"
                      },
                      "groupMemberAttribute": {
                        "description": "Group member attribute for authorizing client traffic",
                        "type": "string"
                      },
                      "idleTimeout": {
                        "description": "Connection timeout limit in seconds",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "default": 3600
                      },
                      "ignoreAuthInfoUnavailable": {
                        "description": "Ignores authentication information if not available",
                        "type": "boolean",
                        "default": false
                      },
                      "ignoreUnknownUser": {
                        "description": "Ignores a user that is unknown",
                        "type": "boolean",
                        "default": false
                      },
                      "loginAttribute": {
                        "description": "Logon attribute. If server is a Microsoft Windows Active Directory server, the value must be the account name \"samaccountname\"",
                        "type": "string"
                      },
                      "port": {
                        "description": "Port number for the LDAP service",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535,
                        "default": 389
                      },
                      "searchScope": {
                        "description": "Level of remote server's directory to search for user authentication, either base object, one level, or subtree",
                        "type": "string",
                        "enum": [
                          "base",
                          "one",
                          "sub"
                        ],
                        "default": "sub"
                      },
                      "searchBaseDn": {
                        "description": "Search base distinguished name",
                        "type": "string"
                      },
                      "searchTimeout": {
                        "description": "Search timeout limit in seconds",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "default": 30
                      },
                      "servers": {
                        "description": "IP addresses or hostnames of the remote authentication servers.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string"
                        }
                      },
                      "userTemplate": {
                        "description": "Specifies a user template for the LDAP application to use for authentication.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Specifies the version number of the LDAP application.",
                        "type": "integer",
                        "minimum": 2,
                        "maximum": 3,
                        "default": 3
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "allOf": [
                  {
                    "if": {
                      "required": [
                        "enabledSourceType"
                      ],
                      "properties": {
                        "enabledSourceType": {
                          "const": "radius"
                        }
                      }
                    },
                    "then": {
                      "required": [
                        "radius"
                      ]
                    }
                  },
                  {
                    "if": {
                      "required": [
                        "enabledSourceType"
                      ],
                      "properties": {
                        "enabledSourceType": {
                          "const": "tacacs"
                        }
                      }
                    },
                    "then": {
                      "required": [
                        "tacacs"
                      ]
                    }
                  },
                  {
                    "if": {
                      "required": [
                        "enabledSourceType"
                      ],
                      "properties": {
                        "enabledSourceType": {
                          "oneOf": [
                            {
                              "const": "ldap"
                            },
                            {
                              "const": "activeDirectory"
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "required": [
                        "ldap"
                      ]
                    }
                  }
                ],
                "additionalProperties": false
              },
              "remoteAuthRole": {
                "description": "Creates a file used by LDAP, Active Directory(r), RADIUS, or TACAS+ server to determine specific access rights.",
                "type": "object",
                "required": [
                  "class",
                  "attribute",
                  "lineOrder",
                  "userPartition"
                ],
                "properties": {
                  "class": {
                    "description": "Indicates that this property contains RemoteAuthRole configuration.",
                    "type": "string",
                    "const": "RemoteAuthRole"
                  },
                  "attribute": {
                    "description": "Specifies an attribute-value pair that an authentication server supplies to the BIG-IP system to match against entries in /config/bigip/auth/remoterole. The specified pair typically identifies users with access rights in common. This option is required.",
                    "type": "string"
                  },
                  "console": {
                    "description": "Specifes if the remotely-authenticated users have tmsh console access or not. Accepted values are 'disabled' and 'tmsh'.",
                    "type": "string",
                    "enum": [
                      "disabled",
                      "tmsh"
                    ],
                    "default": "disabled"
                  },
                  "remoteAccess": {
                    "description": "Enables the specified group of remotely-authenticated users, remote access.",
                    "type": "boolean",
                    "default": false
                  },
                  "lineOrder": {
                    "description": "The BIG-IP only allows one role per user for each partition/tenant.  Because some remote servers allow multiple user roles, the BIG-IP uses the lineOrder parameter to choose one of the conflicting roles for the user at login time. In these cases, the system chooses the role with the lowest line-order number.  See line order in the BIG-IP documentation for more information and examples.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                  },
                  "role": {
                    "description": "Specifies the role that you want to grant to the specified group of remotely-authenticated users.",
                    "type": "string",
                    "enum": [
                      "admin",
                      "application-editor",
                      "auditor",
                      "certificate-manager",
                      "firewall-manager",
                      "fraud-protection-manager",
                      "guest",
                      "irule-manager",
                      "manager",
                      "no-access",
                      "operator",
                      "resource-admin",
                      "user-manager",
                      "web-application-security-administrator",
                      "web-application-security-editor"
                    ],
                    "default": "no-access"
                  },
                  "userPartition": {
                    "description": "Specifies the BIG-IP partition to which you are assigning access to the specified group of remotely-authenticated users. The default value is Common. This option is required.",
                    "type": "string",
                    "default": "Common",
                    "enum": [
                      "all",
                      "Common"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "radius": {
                "description": "Remote RADIUS authentication info.",
                "type": "object",
                "required": [
                  "servers"
                ],
                "properties": {
                  "serviceType": {
                    "description": "Type of service used for the RADIUS server.",
                    "type": "string",
                    "enum": [
                      "administrative",
                      "authenticate-only",
                      "call-check",
                      "callback-administrative",
                      "callback-framed",
                      "callback-login",
                      "callback-nas-prompt",
                      "default",
                      "framed",
                      "login",
                      "nas-prompt",
                      "outbound"
                    ],
                    "default": "default"
                  },
                  "servers": {
                    "description": "RADIUS servers settings",
                    "required": [
                      "primary"
                    ],
                    "properties": {
                      "primary": {
                        "description": "Server connection settings for the primary RADIUS server",
                        "allOf": [
                          {
                            "description": "RADIUS server connection settings.",
                            "type": "object",
                            "required": [
                              "server",
                              "secret"
                            ],
                            "properties": {
                              "server": {
                                "type": "string",
                                "description": "The RADIUS server IP address or hostname.",
                                "anyOf": [
                                  {
                                    "format": "ipv4"
                                  },
                                  {
                                    "format": "ipv6"
                                  },
                                  {
                                    "format": "hostname"
                                  }
                                ]
                              },
                              "port": {
                                "type": "integer",
                                "description": "Port to use when connecting to the RADIUS server.",
                                "default": 1812
                              },
                              "secret": {
                                "description": "Password to use when connection to the RADIUS server.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      },
                      "secondary": {
                        "description": "Server connection settings for the secondary RADIUS server (optional)",
                        "allOf": [
                          {
                            "description": "RADIUS server connection settings.",
                            "type": "object",
                            "required": [
                              "server",
                              "secret"
                            ],
                            "properties": {
                              "server": {
                                "type": "string",
                                "description": "The RADIUS server IP address or hostname.",
                                "anyOf": [
                                  {
                                    "format": "ipv4"
                                  },
                                  {
                                    "format": "ipv6"
                                  },
                                  {
                                    "format": "hostname"
                                  }
                                ]
                              },
                              "port": {
                                "type": "integer",
                                "description": "Port to use when connecting to the RADIUS server.",
                                "default": 1812
                              },
                              "secret": {
                                "description": "Password to use when connection to the RADIUS server.",
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "radiusServer": {
                "description": "RADIUS server connection settings.",
                "type": "object",
                "required": [
                  "server",
                  "secret"
                ],
                "properties": {
                  "server": {
                    "type": "string",
                    "description": "The RADIUS server IP address or hostname.",
                    "anyOf": [
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      },
                      {
                        "format": "hostname"
                      }
                    ]
                  },
                  "port": {
                    "type": "integer",
                    "description": "Port to use when connecting to the RADIUS server.",
                    "default": 1812
                  },
                  "secret": {
                    "description": "Password to use when connection to the RADIUS server.",
                    "type": "string"
                  }
                }
              },
              "tacacs": {
                "description": "TACACS+ authentication info",
                "type": "object",
                "required": [
                  "secret",
                  "servers",
                  "service"
                ],
                "properties": {
                  "accounting": {
                    "description": "Specifies how the system returns accounting information, such as which services users access and how much network resources they consume, to the TACACS+ server. The default setting is Send to first available server.",
                    "type": "string",
                    "enum": [
                      "send-to-all-servers",
                      "send-to-first-server"
                    ],
                    "default": "send-to-first-server"
                  },
                  "authentication": {
                    "description": "Specifies the process the system employs when sending authentication requests. The default is Authenticate to first server.",
                    "type": "string",
                    "enum": [
                      "use-all-servers",
                      "use-first-server"
                    ],
                    "default": "use-first-server"
                  },
                  "debug": {
                    "description": "Specifies whether to log Syslog debugging information at the LOG_DEBUG level. We do not recommend enabling this setting for normal use. The default is Disabled.",
                    "type": "boolean",
                    "default": false
                  },
                  "encryption": {
                    "description": "Specifies whether to use encryption of TACACS+ packets. The default is Enabled.",
                    "type": "boolean",
                    "default": true
                  },
                  "protocol": {
                    "description": "Specifies the protocol associated with the value specified in Service Name, which is a subset of the associated service being used for client authorization or system accounting. You can use following values: lcp, ip, ipx, atalk, vines, lat, xremote, tn3270, telnet, rlogin, pad, vpdn, ftp, http, deccp, osicp, and unknown. Note that the majority of TACACS+ implementations are of protocol type ip, so try that first.",
                    "type": "string",
                    "enum": [
                      "lcp",
                      "ip",
                      "ipx",
                      "atalk",
                      "vines",
                      "lat",
                      "xremote",
                      "tn3270",
                      "telnet",
                      "rlogin",
                      "pad",
                      "vpdn",
                      "ftp",
                      "http",
                      "deccp",
                      "osicp",
                      "unknown"
                    ]
                  },
                  "secret": {
                    "description": "Type the secret key used to encrypt and decrypt packets sent or received from the server. Do not use the pound sign ( # ) in the secret for TACACS+ servers.",
                    "type": "string"
                  },
                  "servers": {
                    "description": "Specifies a list of the IPv4 addresses for servers using the Terminal Access Controller Access System (TACACS)+ protocol with which the system communicates to obtain authorization data. For each address, an alternate TCP port number may be optionally specified by entering the address in the format address:port. If no port number is specified, the default port 49 is used.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "service": {
                    "description": "Specifies the name of the service that the user is requesting to be authorized to use. Identifying what the user is asking to be authorized for, enables the TACACS+ server to behave differently for different types of authorization requests. You can use following values: slip, ppp, arap, shell, tty-daemon, connection, system, and firewall. Specifying this setting is required. Note that the majority of TACACS+ implementations are of service type ppp, so try that first.",
                    "type": "string",
                    "enum": [
                      "slip",
                      "ppp",
                      "arap",
                      "shell",
                      "tty-daemon",
                      "connection",
                      "system",
                      "firewall"
                    ]
                  }
                }
              },
              "ldap": {
                "description": "Remote LDAP authentication info",
                "type": "object",
                "required": [
                  "servers"
                ],
                "properties": {
                  "bindDn": {
                    "description": "Distinguished name of the server account. If server is a Microsoft Windows Active Directory server, the name must be an email address",
                    "type": "string"
                  },
                  "bindPassword": {
                    "description": "Password for the server account",
                    "type": "string"
                  },
                  "bindTimeout": {
                    "description": "Timeout limit in seconds to bind to remote authentication server",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 30
                  },
                  "checkBindPassword": {
                    "description": "Confirms the password for the server account",
                    "type": "boolean",
                    "default": false
                  },
                  "checkRemoteRole": {
                    "description": "Verifies a user's group membership based on the remote-role definition, formatted as *member*of=\"group-dn\"",
                    "type": "boolean",
                    "default": false
                  },
                  "filter": {
                    "description": "Filter used for authorizing client traffic",
                    "type": "string"
                  },
                  "groupDn": {
                    "description": "Group distinguished name for authorizing client traffic",
                    "type": "string"
                  },
                  "groupMemberAttribute": {
                    "description": "Group member attribute for authorizing client traffic",
                    "type": "string"
                  },
                  "idleTimeout": {
                    "description": "Connection timeout limit in seconds",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 3600
                  },
                  "ignoreAuthInfoUnavailable": {
                    "description": "Ignores authentication information if not available",
                    "type": "boolean",
                    "default": false
                  },
                  "ignoreUnknownUser": {
                    "description": "Ignores a user that is unknown",
                    "type": "boolean",
                    "default": false
                  },
                  "loginAttribute": {
                    "description": "Logon attribute. If server is a Microsoft Windows Active Directory server, the value must be the account name \"samaccountname\"",
                    "type": "string"
                  },
                  "port": {
                    "description": "Port number for the LDAP service",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 389
                  },
                  "searchScope": {
                    "description": "Level of remote server's directory to search for user authentication, either base object, one level, or subtree",
                    "type": "string",
                    "enum": [
                      "base",
                      "one",
                      "sub"
                    ],
                    "default": "sub"
                  },
                  "searchBaseDn": {
                    "description": "Search base distinguished name",
                    "type": "string"
                  },
                  "searchTimeout": {
                    "description": "Search timeout limit in seconds",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 30
                  },
                  "servers": {
                    "description": "IP addresses or hostnames of the remote authentication servers.",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string"
                    }
                  },
                  "userTemplate": {
                    "description": "Specifies a user template for the LDAP application to use for authentication.",
                    "type": "string"
                  },
                  "version": {
                    "description": "Specifies the version number of the LDAP application.",
                    "type": "integer",
                    "minimum": 2,
                    "maximum": 3,
                    "default": 3
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      }
    },
    "result": {
      "description": "Status of current request. This is set by the system.",
      "type": "object",
      "readOnly": true,
      "required": [
        "class",
        "code"
      ],
      "properties": {
        "class": {
          "type": "string",
          "const": "Result"
        },
        "code": {
          "description": "Status code.",
          "type": "string",
          "enum": [
            "OK",
            "ERROR"
          ]
        },
        "message": {
          "description": "Further detail about the status.",
          "type": "string"
        }
      }
    }
  },
  "additionalProperties": false
}